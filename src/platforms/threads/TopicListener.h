
#ifndef   _PLATFORM_THREAD_TOPICLISTENER_H_
#define   _PLATFORM_THREAD_TOPICLISTENER_H_

#include <string>

#include "madara/threads/BaseThread.h"
#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>
#include "madara/knowledge/KnowledgeBase.h"
#include <madara/knowledge/containers/Double.h>
#include <madara/knowledge/containers/NativeDoubleVector.h>

namespace platforms
{
  namespace threads
  {
    /**
    * A custom thread generated by gpc.pl
    **/
    class TopicListener : public madara::threads::BaseThread
    {
    public:
      /**
       * Default constructor
       **/
      TopicListener (ros::NodeHandle node_handle);
      
      /**
       * Destructor
       **/
      virtual ~TopicListener ();
      
      /**
        * Initializes thread with MADARA context
        * @param   context   context for querying current program state
        **/
      virtual void init (madara::knowledge::KnowledgeBase & knowledge);

      /**
        * Executes the main thread logic
        **/
      virtual void run (void);

      void processOdom(const nav_msgs::Odometry::ConstPtr& odom);



      void processScanOnce(const sensor_msgs::LaserScan::ConstPtr& scan);

    private:
      /// data plane if we want to access the knowledge base
      madara::knowledge::KnowledgeBase data_;
      bool odomChanged_;
      bool scanChanged_;

      ros::NodeHandle node_handle_;

      ros::Subscriber subOdom_;
      ros::Subscriber subScan_;


      madara::knowledge::containers::Double moveSpeed_;
	  madara::knowledge::containers::Double min_sensor_range_;
	  madara::knowledge::containers::Double max_sensor_range_;
	  madara::knowledge::containers::NativeDoubleVector location_;
	  madara::knowledge::containers::NativeDoubleVector orientation_;
    };
  } // end namespace threads
} // end namespace platforms

#endif // _PLATFORM_THREAD_TOPICLISTENER_H_
