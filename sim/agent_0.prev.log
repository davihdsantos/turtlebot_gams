gams::controllers::BaseController::init_vars: agent.0 self,  group
GroupFactoryRepository::create reading group at prefix 
gams::controllers::BaseController::init_vars: agent.0 self, no group
gams::platforms::PlatformFactoryRepository:add Adding debug factory.
gams::platforms::PlatformFactoryRepository:add Adding print factory.
gams::platforms::PlatformFactoryRepository:add Adding printer factory.
gams::platforms::PlatformFactoryRepository:add Adding null factory.
gams::platforms::PlatformFactoryRepository:add Adding rosp3dx factory.
gams::platforms::PlatformFactoryRepository:add Adding ros-p3dx factory.
gams::algorithms::AlgorithmFactoryRepository:initialize_default_mappings Creating map of all default algorithm factories.
gams::algorithms::AlgorithmFactoryRepository:initialize_default_mappings Flag has not been set. Initializing.
gams::algorithms::AlgorithmFactoryRepository:add Adding barrier factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding debug factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding print factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding printer factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding exec factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding executor factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding follow factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding formation coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding formation factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding formation sync factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding hold factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding home factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding return factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding karl factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding message profiling factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding move factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding waypoints factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding null factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding performance profiling factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding patrol factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding perimeter patrol factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding pp factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding takeoff factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding land factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding wait factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding zone coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding zone defense factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding text factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding spell factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding perimeter patrol area coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding ppac factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding priority weighted random area coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding pwrac factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding snake factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding sac factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding uniform random area coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding urac factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding uniform random edge coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding urec factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding waypoints coverage factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding waypoints_coverage factory.
gams::controllers::BaseController::constructor: default constructor called.
gams::controllers::BaseController::init_vars: 0 id, 1 prutility::bind_to_ephemeral_port: getting hostname from ACE_INET_Addr
KnowledgeBaseImpl::setup_unique_hostport: unique bind to lsa-XPS-8700:50000
KnowledgeBaseImpl::attach_transport: activating transport type 5
transport::Base::setup no permanent rules were set
transport::Base::setup no read domains set. Adding write domain (gams_sims)
transport::Base::setup Write domain: gams_sims. Read domains: gams_sims
MulticastTransport::setup: default socket buff size is send=212992, rcv=212992
MulticastTransport::setup: setting send buff size to settings.queue_length (2000000)
MulticastTransport::setup: current socket buff size is send=425984, rcv=212992
MulticastTransport::setup: setting rcv buff size to settings.queue_length (2000000)
MulticastTransport::setup: current socket buff size is send=425984, rcv=425984
MulticastTransport::setup: settings address[0] to 10.32.177.58:4150
MulticastTransport::setup: Error subscribing to multicast address 10.32.177.58:4150
MulticastTransport::setup: starting 1 threads at 0.000000 hertz
WorkerThread::WorkerThread(read0): thread started (result = 0)
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::set_name: setting name to agent.0.location
WorkerThread(read0)::svc: checking thread existence
NativeDoubleVector::set_name: setting name to agent.0.orientation
NativeDoubleVector::set_name: setting name to agent.0.home
NativeDoubleVector::set_name: setting name to agent.0.source
NativeDoubleVector::set_name: setting name to agent.0.source_orientation
NativeDoubleVector::set_name: setting name to agent.0.dest_orientation
NativeDoubleVector::set_name: setting name to agent.0.dest
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::constructor: new object
NativeDoubleVector::set_name: setting name to agent.0.location
NativeDoubleVector::set_name: setting name to agent.0.orientation
MulticastTransportReadThread::init: no permanent rules were set
WorkerThread(read0)::svc: thread blasting at infinite hz
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
NativeDoubleVector::set_name: setting name to agent.0.home
NativeDoubleVector::set_name: setting name to agent.0.source
NativeDoubleVector::set_name: setting name to agent.0.source_orientation
NativeDoubleVector::set_name: setting name to agent.0.dest_orientation
NativeDoubleVector::set_name: setting name to agent.0.dest
KnowledgeBaseImpl::compile: compiling 
/**
 * Set VREP view area GPS mapping
 **/
.vrep_sw_position = [0,0];
.vrep_ne_position = [0,0];

/**
 * Surface can be concrete or water 
 **/
.surface = 'water';

/**
 * Define an example search area. Search areas can contain multiple regions.
**/

/*
search_area.0.object_type = 4;
search_area.0.size = 4;
search_area.0.0 = 'region.0';
search_area.0.1 = 'region.1';
search_area.0.2 = 'region.2';
search_area.0.3 = 'region.3';

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [0, -4];
region.0.1 = [0, -1];
region.0.2 = [4, -1];
region.0.3 = [4, -4];

region.1.object_type = 1;
region.1.type = 0; // convex
region.1.priority = 20;
region.1.size = 4;
region.1.0 = [0, -1];
region.1.1 = [0,  1];
region.1.2 = [1,  1];
region.1.3 = [1, -1];

region.2.object_type = 1;
region.2.type = 0;
region.2.priority = 30;
region.2.size = 4;
region.2.0 = [0,  1];
region.2.1 = [0,  3];
region.2.2 = [4,  3];
region.2.3 = [4,  1];


region.3.object_type = 1;
region.3.type = 0;
region.3.priority = 40;
region.3.size = 4;
region.3.0 = [2, -1];
region.3.1 = [2,  1];
region.3.2 = [4,  1];
region.3.3 = [4, -1];
*/

/*
region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [-30.060700, -51.173249];
region.0.1 = [-30.060700, -51.173528];
region.0.2 = [-30.060800, -51.173528];
region.0.3 = [-30.060800, -51.173249];
*/
/*
search_area.0.object_type = 4;
search_area.0.size = 4;
search_area.0.0 = 'region.0';
search_area.0.1 = 'region.1';
search_area.0.2 = 'region.2';
search_area.0.3 = 'region.3';

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [-50.0, -30.0];
region.0.1 = [-50.000009, -30.0];
region.0.2 = [-50.000009, -30.000009];
region.0.3 = [-50.0, -30.000009];



region.1.object_type = 1;
region.1.type = 0; // convex
region.1.priority = 20;
region.1.size = 4;
region.1.0 = [0, -1];
region.1.1 = [0,  1];
region.1.2 = [1,  1];
region.1.3 = [1, -1];

region.2.object_type = 1;
region.2.type = 0;
region.2.priority = 30;
region.2.size = 4;
region.2.0 = [0,  1];
region.2.1 = [0,  3];
region.2.2 = [4,  3];
region.2.3 = [4,  1];


region.3.object_type = 1;
region.3.type = 0;
region.3.priority = 40;
region.3.size = 4;
region.3.0 = [2, -1];
region.3.1 = [2,  1];
region.3.2 = [4,  1];
region.3.3 = [4, -1];

*/

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 0;
region.0.size = 4;
region.0.0=[0, 5];
region.0.1=[10, 5];
region.0.2=[10, 0];
region.0.3=[0, 0];
;

/**
 * Common algorithm that may be used to initialize agent algorithms
 **/
.algorithm = null;
.frameType = 'onlyCartesian';

/**
 * Type of platform to use. Options include:
 * vrep-quad       : A VREP quadcopter
 * vrep-quad-laser : A VREP quadcopter
 * vrep-boat       : A VREP boat
 * vrep-ant        : A VREP ant-like ground robot
 * vrep-summit     : A VREP Summit robot
 * 
 * Specialty options (must be compiled with more than just vrep feature)
 * ros-p3dx        : A ROS Pioneer 3DX robot
 **/
.platform = 'turtleGenericFrame';

sensor.coverage.origin=[0,0, 0.0];

/**
 * The host information where VREP is running
 **/
.vrep_host = '127.0.0.1';

/**
 * Max distance (meters) to move target when VREPBase::move is invoked,
 * if no move thread is being used (vrep_move_thread_rate = 0)
 **/
.vrep_max_delta = 1;

/**
 * Hertz rate to run VREPBase move thread. Set to zero to disable thread
 **/
.vrep_move_thread_rate = 10;

/**
 * Each thread tick, target will move at most vrep_thread_move_speed divided
 * by vrep_move_thread_rate meters.
 **/
.vrep_thread_move_speed = 2;;

// Setup VREP port for agent
.vrep_port = 19906;


/**
 * Change the following to unique coordinates
 * for each agent file
 **/

.initial_lat = 0;
.initial_lon = 0;
.initial_alt = 0;



.ros_namespace='/diff1';
.ros_node='turtlebot_platform_node';

/*
agent.0.algorithm = "waypoints";
agent.0.algorithm.args.locations.size=4;
agent.0.algorithm.args.locations.0=[0, 5, 0];
agent.0.algorithm.args.locations.1=[10, 5, 0];
agent.0.algorithm.args.locations.2=[10, 0, 0];
agent.0.algorithm.args.locations.3=[0, 0, 0];
agent.0.algorithm.args.repeat=3;
*/

agent.0.algorithm = "urac";
agent.0.algorithm.args.area="region.0";;

KnowledgeBaseImpl::evaluate: evaluating 
/**
 * Set VREP view area GPS mapping
 **/
.vrep_sw_position = [0,0];
.vrep_ne_position = [0,0];

/**
 * Surface can be concrete or water 
 **/
.surface = 'water';

/**
 * Define an example search area. Search areas can contain multiple regions.
**/

/*
search_area.0.object_type = 4;
search_area.0.size = 4;
search_area.0.0 = 'region.0';
search_area.0.1 = 'region.1';
search_area.0.2 = 'region.2';
search_area.0.3 = 'region.3';

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [0, -4];
region.0.1 = [0, -1];
region.0.2 = [4, -1];
region.0.3 = [4, -4];

region.1.object_type = 1;
region.1.type = 0; // convex
region.1.priority = 20;
region.1.size = 4;
region.1.0 = [0, -1];
region.1.1 = [0,  1];
region.1.2 = [1,  1];
region.1.3 = [1, -1];

region.2.object_type = 1;
region.2.type = 0;
region.2.priority = 30;
region.2.size = 4;
region.2.0 = [0,  1];
region.2.1 = [0,  3];
region.2.2 = [4,  3];
region.2.3 = [4,  1];


region.3.object_type = 1;
region.3.type = 0;
region.3.priority = 40;
region.3.size = 4;
region.3.0 = [2, -1];
region.3.1 = [2,  1];
region.3.2 = [4,  1];
region.3.3 = [4, -1];
*/

/*
region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [-30.060700, -51.173249];
region.0.1 = [-30.060700, -51.173528];
region.0.2 = [-30.060800, -51.173528];
region.0.3 = [-30.060800, -51.173249];
*/
/*
search_area.0.object_type = 4;
search_area.0.size = 4;
search_area.0.0 = 'region.0';
search_area.0.1 = 'region.1';
search_area.0.2 = 'region.2';
search_area.0.3 = 'region.3';

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 10;
region.0.size = 4;
region.0.0 = [-50.0, -30.0];
region.0.1 = [-50.000009, -30.0];
region.0.2 = [-50.000009, -30.000009];
region.0.3 = [-50.0, -30.000009];



region.1.object_type = 1;
region.1.type = 0; // convex
region.1.priority = 20;
region.1.size = 4;
region.1.0 = [0, -1];
region.1.1 = [0,  1];
region.1.2 = [1,  1];
region.1.3 = [1, -1];

region.2.object_type = 1;
region.2.type = 0;
region.2.priority = 30;
region.2.size = 4;
region.2.0 = [0,  1];
region.2.1 = [0,  3];
region.2.2 = [4,  3];
region.2.3 = [4,  1];


region.3.object_type = 1;
region.3.type = 0;
region.3.priority = 40;
region.3.size = 4;
region.3.0 = [2, -1];
region.3.1 = [2,  1];
region.3.2 = [4,  1];
region.3.3 = [4, -1];

*/

region.0.object_type = 1;
region.0.type = 0;
region.0.priority = 0;
region.0.size = 4;
region.0.0=[0, 5];
region.0.1=[10, 5];
region.0.2=[10, 0];
region.0.3=[0, 0];
;

/**
 * Common algorithm that may be used to initialize agent algorithms
 **/
.algorithm = null;
.frameType = 'onlyCartesian';

/**
 * Type of platform to use. Options include:
 * vrep-quad       : A VREP quadcopter
 * vrep-quad-laser : A VREP quadcopter
 * vrep-boat       : A VREP boat
 * vrep-ant        : A VREP ant-like ground robot
 * vrep-summit     : A VREP Summit robot
 * 
 * Specialty options (must be compiled with more than just vrep feature)
 * ros-p3dx        : A ROS Pioneer 3DX robot
 **/
.platform = 'turtleGenericFrame';

sensor.coverage.origin=[0,0, 0.0];

/**
 * The host information where VREP is running
 **/
.vrep_host = '127.0.0.1';

/**
 * Max distance (meters) to move target when VREPBase::move is invoked,
 * if no move thread is being used (vrep_move_thread_rate = 0)
 **/
.vrep_max_delta = 1;

/**
 * Hertz rate to run VREPBase move thread. Set to zero to disable thread
 **/
.vrep_move_thread_rate = 10;

/**
 * Each thread tick, target will move at most vrep_thread_move_speed divided
 * by vrep_move_thread_rate meters.
 **/
.vrep_thread_move_speed = 2;;

// Setup VREP port for agent
.vrep_port = 19906;


/**
 * Change the following to unique coordinates
 * for each agent file
 **/

.initial_lat = 0;
.initial_lon = 0;
.initial_alt = 0;



.ros_namespace='/diff1';
.ros_node='turtlebot_platform_node';

/*
agent.0.algorithm = "waypoints";
agent.0.algorithm.args.locations.size=4;
agent.0.algorithm.args.locations.0=[0, 5, 0];
agent.0.algorithm.args.locations.1=[10, 5, 0];
agent.0.algorithm.args.locations.2=[10, 0, 0];
agent.0.algorithm.args.locations.3=[0, 0, 0];
agent.0.algorithm.args.repeat=3;
*/

agent.0.algorithm = "urac";
agent.0.algorithm.args.area="region.0";;
.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Caocesses
gams::algorithms::AlgorithmFactoryRepository:add Adding square_patrol factory.
gams::algorithms::AlgorithmFactoryRepository:add Adding zigzagcoverage factory.
gams::platforms::PlatformFactoryRepository:add Adding turtlebot_platform factory.
gams::platforms::PlatformFactoryRepository:add Adding turtlegenericframe factory.
gams::controllers::BaseController::init_platform: initializing platform turtleGenericFrame
gams::controllers::BaseController::init_platform: deleting old platform
gams::controllers::BaseController::init_platform: factory is creating platform turtleGenericFrame
gams::platforms::PlatformFactoryRepository::create(turtleGenericFrame,...)
gams::controllers::BaseController::init_vars: initializing platform's vars
gams::controllers::BaseController::init_platform: Updating algorithm factory's platform
gams::controllers::BaseController::init_algorithm: initializing algorithm debug
gams::controllers::BaseController::init_algorithm: deleting old algorithm
gams::controllers::BaseController::init_algorithm: factory is creating algorithm debug
gams::algorithms::AlgorithmFactoryRepository::create: creating "debug" algorithm.
gams::algorithms::BaseAlgorithm: constructor succeeded
gams::controllers::BaseController::init_vars: initializing algorithm's vars
gams::controllers::BaseController::run: loop_period: 1.000000s, max_runtime: 500.000000s, send_period: 1.000000s
gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::system_analyze: Processing agent command: urac
gams::controllers::BaseController::init_algorithm: initializing algorithm urac
gams::controllers::BaseController::init_algorithm: deleting old algorithm
gams::controllers::BaseController::init_algorithm: factory is creating algorithm urac
gams::algorithms::AlgorithmFactoryRepository::create: creating "urac" algorithm.
gams::algorithms::area_coverage::UniformRandomAreaCoverageFactory: entered create with 1 args
gams::algorithms::FormationSyncFactory: setting search_area to region.0
gams::algorithms::BaseAlgorithm: constructor succeeded
gams::algorithms::area_coverage::BaseAreaCoverage: constructor succeeded
gams::pose::Region::from_container: name = region.0
gams::pose::Region::from_container: type is arbitrary convex polygon
gams::pose::Region::from_container: size is 4
gams::pose::Region::from_container: Adding coordinate (0.000000 lat, 5.000000 lng)
gams::pose::Region::from_container: Adding coordinate (10.000000 lat, 5.000000 lng)
gams::pose::Region::from_container: Adding coordinate (10.000000 lat, 0.000000 lng)
gams::pose::Region::from_container: Adding coordinate (0.000000 lat, 0.000000 lng)
gams::pose::SearchArea::get_convex_hull: building a convex hull
gams::pose::SearchArea::get_convex_hull: total region vertices is 4. Resizing list.
gams::pose::SearchArea::get_convex_hull: sorting vertices.
gams::pose::SearchArea::get_convex_hull: removing duplicate vertices.
gams::pose::SearchArea::get_convex_hull: after duplicates check, positions size set to 4.
gams::pose::SearchArea::get_convex_hull: allocating 8 vertices for potential hull.
gams::pose::SearchArea::get_convex_hull: building lower hull.
gams::pose::SearchArea::get_convex_hull: lower hull construction used 3 points.
gams::pose::SearchArea::get_convex_hull: upper hull construction finished hull with 4 points.
gams::controllers::BaseController::init_vars: initializing algorithm's vars
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 25 modifications to send
25 modifications ready to send:
Integer: agent.0.algorithm.accepts = 1
Integer: agent.0.algorithm.debug.deadlocked = 0
Integer: agent.0.algorithm.debug.failed = 0
Integer: agent.0.algorithm.debug.finished = 0
Integer: agent.0.algorithm.debug.ok = 1
Integer: agent.0.algorithm.debug.paused = 0
Integer: agent.0.algorithm.debug.unknown = 0
Integer: agent.0.algorithm.debug.waitlling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 587
MulticastTransport::send_data: Sent packet of size 587
MulticastTransport::send_data: Send bandwidth = 58 B/s
MulticastTransportReadThread::run: received a message header of 587 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 58 B/s
MulticastTransportReadThread::run: calling decode filters on 587 bytes
MulticastTransportReadThread::run: Decoding resulted in 587 final bytes
KnowledgeBaseImpl::compile: compiling agent.0.madara_debug_level = 3
KnowledgeBaseImpl::evaluate: evaluating agent.0.madara_debug_level = 3.
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeBaseImpl::compile: compiling agent.0.gams_debug_level = 6
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
KnowledgeBaseImpl::evaluate: evaluating agent.0.gams_debug_level = 6.
NativeDoubleVector::constructor: new object
NativeDoubleVector::set_name: setting name to sensor.coverage.origin
NativeDoubleVector::resize: sensor.coverage.origin: resizing to 3
NativeDoubleVector[]: sensor.coverage.origin: retrieving element from container
NativeDoubleVector[]: sensor.coverage.origin: retrieving element from container
NativeDoubleVector[]: sensor.coverage.origin: retrieving element from container
NativeDoubleVector::constructor: new object
NativeDoubleVector::set_name: setting name to sensor.coverage.origin
NativeDoubleVector::set: sensor.coverage.origin: setting element [0] to 0.000000
NativeDoubleVector::set: sensor.coverage.origin: setting element [1] to 0.000000
NativeDoubleVector::set: sensor.coverage.origin: setting element [2] to 0.000000
NativeDoubleVector::destructor called on sensor.coverage.origin
WorkerThread::WorkerThread(TopicListener2): thread started (result = 0)
WorkerThread(TopicListener2)::svc: checking thread existence
WorkerThread::WorkerThread(TopicPublisher): thread started (result = 0)
WorkerThread(TopicPublisher)::svc: checking thread existence

Knowledge in Knowledge Base:
.frameType=onlyCartesian
.goalId_=0
.id=-1
.initial_alt=0
.initial_lat=0
.initial_lon=0
.platform=turtleGenericFrame
.platform.agent.0.communication_available=0
.platform.agent.0.deadlocked=0
.platform.agent.0.failed=0
.platform.agent.0.gps_spoofed=0
.platform.agent.0.movement_available=0
.platform.agent.0.moving=0
.platform.agent.0.ok=1
.platform.agent.0.reduced_movement=0
.platform.agent.0.reduced_sensing=0
.platform.agent.0.sensors_available=0
.platform.agent.0.waiting=0
.prefix=agent.0
.ros_namespace=/diff1
.ros_node=turtlebot_platform_node
.surface=water
.vrep_host=127.0.0.1
.vrep_max_delta=1
.vrep_move_thread_rate=10
.vrep_ne_position=0, 0
.vrep_port=19906
.vrep_sw_position=0, 0
.vrep_thread_move_speed=2
agent.0.algorithm=urac
agent.0.algorithm.args.area=region.0
agent.0.gams_debug_level=6
agent.0.madara_debug_level=3
region.0.0=0, 5
region.0.1=10, 5
region.0.2=10, 0
region.0.3=0, 0
region.0.object_type=1
region.0.priority=0
region.0.size=4
region.0.type=0
sensor.coverage.origin=0.000000, 0.000000, 0.000000
sensor.coverage.range=2.500000
swarm.size=1
KnowledgeRecord::apply: checking if record is non-zero.
Integer::is_true: checking for non-zero value
KnowledgeRecord::apply: checking if record is non-zero.
Integer::is_true: final result is 0
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieviing = 0
Integer: agent.0.algorithm.id = 0
String: agent.0.algorithm.last = urac
String: agent.0.algorithm.last.args.area = region.0
Integer: agent.0.algorithm.urac.deadlocked = 0
Integer: agent.0.algorithm.urac.failed = 0
Integer: agent.0.algorithm.urac.finished = 0
Integer: agent.0.algorithm.urac.ok = 1
Integer: agent.0.algorithm.urac.paused = 0
Integer: agent.0.algorithm.urac.unknown = 0
Integer: agent.0.algorithm.urac.waiting = 0
Integer: agent.0.gams_debug_level = 6
Double: agent.0.loop_hz = 1.000000
Integer: agent.0.madara_debug_level = 3
Double: agent.0.send_hz = -1.000000
Integer: region.0.priority = 1
Double array: sensor.coverage.origin = 0.000000, 0.000000, 0.000000
Double: sensor.coverage.range = 2.500000

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 25 modifications to send
25 modifications ready to send:
Integer: agent.0.algorithm.accepts = 1
Integer: agent.0.algorithm.debug.deadlocked = 0
Integer: agent.0.algorithm.debug.failed = 0
Integer: agent.0.algorithm.debug.finished = 0
Integer: agent.0.algorithm.debug.ok = 1
Integer: agent.0.algorithm.debug.paused = 0
Integer: agent.0.algorithm.debug.unknown = 0
Integer: agent.0.algorithm.debug.waiting = 0
Integer: agent.0.algorithm.id = 0
String: agent.0.algorithm.last = urac
String: agent.0.algorithm.last.args.area = region.0
Integer: agent.0.algorithm.urac.deadlocked = 0
Integer: agent.0.algorithm.urac.failed = 0
Integer: agent.0.algorithm.urac.finished = 0
Integer: agent.0.algorithm.urac.ok = 1
Integer: agent.0.algorithm.urac.paused = 0
Integer: agent.0.algorithm.urac.unknown = 0
Integer: agent.0.algorithm.urac.waiting = 0
Integer: agent.0.gams_debug_level = 6
Double: agent.0.loop_hz = 1.000000
Integer: agent.0.madara_debug_level = 3
Double: agent.0.send_hz = -1.000000
Integer: region.0.priority = 1
Double array: sensor.coverage.origin = 0.000000, 0.000000, 0.000000
Double: sensor.coverage.range = 2.500000

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 1.892972 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 25 modifications to send
25 modifications ready to send:
Integer: agent.0.algorithm.accepts = 1
Integer: agent.0.algorithm.debug.deadlocked = 0
Integer: agent.0.algorithm.debug.failed = 0
Integer: agent.0.algorithm.debug.finished = 0
Integer: agent.0.algorithm.debug.ok = 1
Integer: agent.0.algorithm.debug.paused = 0
Integer: agent.0.algorithm.debug.unknown = 0
Integer: agent.0.algorithm.debug.waiting = 0
Integer: agent.0.algorithm.id = 0
String: agent.0.algorithm.last = urac
String: agent.0.algorithm.last.args.area = region.0
Integer: agent.0.algorithm.urac.deadlocked = 0
Integer: agent.0.algorithm.urac.failed = 0
Integer: agent.0.algorithm.urac.finished = 0
Integer: agent.0.algorithm.urac.ok = 1
Integer: agent.0.algorithm.urac.paused = 0
Integer: agent.0.algorithm.urac.unknown = 0
Integer: agent.0.algorithm.urac.waiting = 0
Integer: agent.0.gams_debug_level = 6
Double: agent.0.loop_hz = 1.000000
Integer: agent.0.madara_debug_level = 3
Double: agent.0.send_hz = -1.000000
Integer: region.0.priority = 1
Double array: sensor.coverage.origin = 0.000000, 0.000000, 0.000000
Double: sensor.coverage.range = 2.500000

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 25 modifications to send
gams::controllers::BaseController::run: modifieds=25 modificationng element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 1340
MulticastTransportReadThread::run: received a message header of 1340 bytes from 10.32.177.58:52026
MulticastTransport::send_data: Sent packet of size 1340
MulticastTransport::send_data: Send bandwidth = 192 B/s
MulticastTransportReadThread::run: Receive bandwidth = 192 B/s
MulticastTransportReadThread::run: calling decode filters on 1340 bytes
MulticastTransportReadThread::run: Decoding resulted in 1340 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread repeating at 1.000000 hz
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::s ready to send:
Integer: agent.0.algorithm.accepts = 1
Integer: agent.0.algorithm.debug.deadlocked = 0
Integer: agent.0.algorithm.debug.failed = 0
Integer: agent.0.algorithm.debug.finished = 0
Integer: agent.0.algorithm.debug.ok = 1
Integer: agent.0.algorithm.debug.paused = 0
Integer: agent.0.algorithm.debug.unknown = 0
Integer: agent.0.algorithm.debug.waiting = 0
Integer: agent.0.algorithm.id = 0
String: agent.0.algorithm.last = urac
String: agent.0.algorithm.last.args.area = region.0
Integer: agent.0.algorithm.urac.deadlocked = 0
Integer: agent.0.algorithm.urac.failed = 0
Integer: agent.0.algorithm.urac.finished = 0
Integer: agent.0.algorithm.urac.ok = 1
Integer: agent.0.algorithm.urac.paused = 0
Integer: agent.0.algorithm.urac.unknown = 0
Integer: agent.0.algorithm.urac.waiting = 0
Integer: agent.0.gams_debug_level = 6
Double: agent.0.loop_hz = 1.000000
Integer: agent.0.madara_debug_level = 3
Double: agent.0.send_hz = -1.000000
Integer: region.0.priority = 1
Double array: sensor.coverage.origin = 0.000000, 0.000000, 0.000000
Double: sensor.coverage.range = 2.500000

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 0 modifications to send
0 modifications ready to send:

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 0 modifications to send
0 modifications ready to send:

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 1.892972 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 0 modifications to send
0 modifications ready to send:

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 0 modifications to send
gams::controllers::BaseController::run: modifieds=0 modifications ready to send:

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766654, 0.334172, 0.040707
Double array: agent.0.orientation = -0.000119, -0.010840, -0.011746, 0.999872

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766654, 0.334172, 0.040707
Double array: agent.0.orientation = -0.000119, -0.010840, -0.011746, 0.999872

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseControllersvc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread repeating at 1.000000 hz
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
MulticastTransportReadThread::run: wait timeout on new messages. Proceeding to next wait
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 218 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 218 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039330 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766654, 0.334172, 0.040707
Double array: agent.0.orientation = -0.000119, -0.010840, -0.011746, 0.999872

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766654, 0.334172, 0.040707
Double array: agent.0.orientation = -0.000119, -0.010840, -0.011746, 0.999872

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766663, 0.334558, 0.040686
Double array: agent.0.orientation = -0.000125, -0.010838, -0.011863, 0.999871

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766663, 0.334558, 0.040686
Double array: agent.0.orientation = -0.000125, -0.010838, -0.011863, 0.999871

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039308 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766663, 0.334558, 0.040686
Double array: agent.0.orientation = -0.000125, -0.010838, -0.011863, 0.999871

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766663, 0.334558, 0.040686
Double array: agent.0.orientation = -0.000125, -0.010838, -0.011863, 0.999871

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766673, 0.334954, 0.040675
Double array: agent.0.orientation = -0.000137, -0.010837, -0.011983, 0.999869

gams::controllers::BaseController::run: call
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 244 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 244 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::sing analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766673, 0.334954, 0.040675
Double array: agent.0.orientation = -0.000137, -0.010837, -0.011983, 0.999869

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039286 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766673, 0.334954, 0.040675
Double array: agent.0.orientation = -0.000137, -0.010837, -0.011983, 0.999869

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766673, 0.334954, 0.040675
Double array: agent.0.orientation = -0.000137, -0.010837, -0.011983, 0.999869

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766682, 0.335330, 0.040680
Double array: agent.0.orientation = -0.000136, -0.010838, -0.012098, 0.999868

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766682, 0.335330, 0.040680
Double array: agent.0.orientation = -0.000136, -0.010838, -0.012098, 0.999868

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039265 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766682, 0.335330, 0.040680
Double array: agent.0.orientation = -0.000136, -0.010838, -0.012098, 0.999868

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766682, 0.335330, 0.040680
Double array: agent.0.orientation = -0.000136, -0.010838, -0.012098, 0.999868

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams:end_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 270 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 270 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 295 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 295 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicP:controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766691, 0.335701, 0.040708
Double array: agent.0.orientation = -0.000125, -0.010840, -0.012210, 0.999867

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766691, 0.335701, 0.040708
Double array: agent.0.orientation = -0.000125, -0.010840, -0.012210, 0.999867

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039244 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766691, 0.335701, 0.040708
Double array: agent.0.orientation = -0.000125, -0.010840, -0.012210, 0.999867

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766691, 0.335701, 0.040708
Double array: agent.0.orientation = -0.000125, -0.010840, -0.012210, 0.999867

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766701, 0.336089, 0.040702
Double array: agent.0.orientation = -0.000127, -0.010839, -0.012328, 0.999865

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766701, 0.336089, 0.040702
Double array: agent.0.orientation = -0.000127, -0.010839, -0.012328, 0.999865

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039224 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766701, 0.336089, 0.040702
Double array: agent.0.orientation = -0.000127, -0.010839, -0.012328, 0.999865

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::ublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 321 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 321 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 347 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 347 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 373 B/s
MulticastTransportReadThread::run: wait timeout on new messages. Proceeding to next wait
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 373 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
Knowledganalyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766701, 0.336089, 0.040702
Double array: agent.0.orientation = -0.000127, -0.010839, -0.012328, 0.999865

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766711, 0.336465, 0.040674
Double array: agent.0.orientation = -0.000140, -0.010837, -0.012442, 0.999864

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766711, 0.336465, 0.040674
Double array: agent.0.orientation = -0.000140, -0.010837, -0.012442, 0.999864

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039203 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766711, 0.336465, 0.040674
Double array: agent.0.orientation = -0.000140, -0.010837, -0.012442, 0.999864

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766711, 0.336465, 0.040674
Double array: agent.0.orientation = -0.000140, -0.010837, -0.012442, 0.999864

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766720, 0.336857, 0.040673
Double array: agent.0.orientation = -0.000144, -0.010837, -0.012561, 0.999862

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766720, 0.336857, 0.040673
Double array: agent.0.orientation = -0.000144, -0.010837, -0.012561, 0.999862

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039181 (need 0.eRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 399 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 399 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
MulticastTransportReadThread::run: wait timeout on new messages. Proceeding to next wait
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling fil500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766720, 0.336857, 0.040673
Double array: agent.0.orientation = -0.000144, -0.010837, -0.012561, 0.999862

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766720, 0.336857, 0.040673
Double array: agent.0.orientation = -0.000144, -0.010837, -0.012561, 0.999862

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766729, 0.337231, 0.040675
Double array: agent.0.orientation = -0.000135, -0.010837, -0.012675, 0.999861

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766729, 0.337231, 0.040675
Double array: agent.0.orientation = -0.000135, -0.010837, -0.012675, 0.999861

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039161 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766729, 0.337231, 0.040675
Double array: agent.0.orientation = -0.000135, -0.010837, -0.012675, 0.999861

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766729, 0.337231, 0.040675
Double array: agent.0.orientation = -0.000135, -0.010837, -0.012675, 0.999861

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766739, 0.337600, 0.040703
Double array: agent.0.orientation = -0.000130, -0.010839, -0.012787, 0.999859

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::conter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 424 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 424 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 258 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 258 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thrtrollers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766739, 0.337600, 0.040703
Double array: agent.0.orientation = -0.000130, -0.010839, -0.012787, 0.999859

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039141 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766739, 0.337600, 0.040703
Double array: agent.0.orientation = -0.000130, -0.010839, -0.012787, 0.999859

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766739, 0.337600, 0.040703
Double array: agent.0.orientation = -0.000130, -0.010839, -0.012787, 0.999859

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766749, 0.337978, 0.040707
Double array: agent.0.orientation = -0.000140, -0.010840, -0.012902, 0.999858

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766749, 0.337978, 0.040707
Double array: agent.0.orientation = -0.000140, -0.010840, -0.012902, 0.999858

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039121 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766749, 0.337978, 0.040707
Double array: agent.0.orientation = -0.000140, -0.010840, -0.012902, 0.999858

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766749, 0.337978, 0.040707
Double array: agent.0.orientation = -0.000140, -0.010840, -0.012902, 0.999858

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::Bead checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 283 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 283 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
MulticastTransportReadThread::run: wait timeout on new messages. Proceeding to next wait
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MultiaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766758, 0.338348, 0.040687
Double array: agent.0.orientation = -0.000149, -0.010838, -0.013014, 0.999857

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766758, 0.338348, 0.040687
Double array: agent.0.orientation = -0.000149, -0.010838, -0.013014, 0.999857

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039101 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766758, 0.338348, 0.040687
Double array: agent.0.orientation = -0.000149, -0.010838, -0.013014, 0.999857

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execute (), 2 modifications to send
gams::controllers::BaseController::run: modifieds=2 modifications ready to send:
Double array: agent.0.location = 6.766758, 0.338348, 0.040687
Double array: agent.0.orientation = -0.000149, -0.010838, -0.013014, 0.999857

gams::controllers::BaseController::run: calling system_analyze ()
gams::controllers::BaseController::system_analyze: checking agent and swarm commands
gams::controllers::BaseController::run: sending updates
gams::controllers::BaseController::run: sleeping until next epoch
gams::controllers::BaseController::run: calling monitor ()
gams::controllers::BaseController::monitor: calling platform_->sense ()
gams::controllers::BaseController::run: after monitor (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766768, 0.338717, 0.040671
Double array: agent.0.orientation = -0.000143, -0.010837, -0.013126, 0.999855

gams::controllers::BaseController::run: calling analyze ()
gams::controllers::BaseController::analyze: calling platform_->analyze ()

 ------------- PLATFORM ARRIVED!!!...
gams::controllers::BaseController::analyze: calling algorithm_->analyze ()
gams::controllers::BaseController::run: after analyze (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766768, 0.338717, 0.040671
Double array: agent.0.orientation = -0.000143, -0.010837, -0.013126, 0.999855

gams::controllers::BaseController::run: calling plan ()
gams::controllers::BaseController::plan: calling algorithm_->plan ()
gams::algorithms::area_coverage::BaseAreaCoverage::plan: distance between points is 5.039081 (need 0.500000 accuracy)
gams::controllers::BaseController::run: after plan (), 2 modifications to send
2 modifications ready to send:
Double array: agent.0.location = 6.766768, 0.338717, 0.040671
Double array: agent.0.orientation = -0.000143, -0.010837, -0.013126, 0.999855

gams::controllers::BaseController::run: calling execute ()
gams::controllers::BaseController::execute: calling algorithm_->execute ()
gams::algorithms::area_coverage::BaseAreaCoverage::execute: calling platform->move("0.73731627,1.7434763,0")
gams::controllers::BaseController::analyze: exception in algorithm_->execute (): No transform path found between frames.
gams::controllers::BaseController::run: after execucastTransport::send_data: Send bandwidth = 283 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 283 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
WorkerThread(TopicListener2)::svc: thread checking for next hertz epoch
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector[]: agent.0.location: retrieving element from container
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
NativeDoubleVector::to_record: agent.0.location: retrieving record
KnowledgeRecord::apply: checking if record is non-zero.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: Calling filter chain.
MulticastTransport::send_data: Filter returned.
MulticastTransport::send_data: calling encode filters
MulticastTransport::send_data: Sending packet of size 258
MulticastTransport::send_data: Sent packet of size 258
MulticastTransport::send_data: Send bandwidth = 283 B/s
MulticastTransportReadThread::run: received a message header of 258 bytes from 10.32.177.58:52026
MulticastTransportReadThread::run: Receive bandwidth = 283 B/s
MulticastTransportReadThread::run: calling decode filters on 258 bytes
MulticastTransportReadThread::run: Decoding resulted in 258 final bytes
MulticastTransportReadThread::run: dropping message from ourself
MulticastTransportReadThread::run: finished iteration.
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(read0)::svc: thread calling run function
WorkerThread(TopicPublisher)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicPublisher)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: agent.0.orientation: setting all elements
WorkerThread(TopicPublisher)::svc: thread checking for next hertz epoch
WorkerThread(TopicListener2)::svc: thread past epoch
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread checking for pause
KnowledgeRecord::apply: checking if record is non-zero.
WorkerThread(TopicListener2)::svc: thread calling run function
NativeDoubleVector::set: agent.0.location: setting all elements
NativeDoubleVector::set: 